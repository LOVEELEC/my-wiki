{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"index.html#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"index.html#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"cortex-m3%26m4.html","text":"Cortex-M3&M4","title":"cortex-M3&M4"},{"location":"cortex-m3%26m4.html#cortex-m3m4","text":"","title":"Cortex-M3&amp;M4"},{"location":"BES/learn_mark.html","text":"\u7a0b\u5e8f\u8c03\u7528\u6d41\u7a0b AUDIO_PROMPT_USE_DAC2_ENABLED = 1 IBRT = 1 \u5b9a\u4e49 \u4e86 AUDIO_QUEUE_SUPPORT MEDIA_PLAYER_SUPPORT \u672a\u5b9a\u4e49 PROMPT_IN_FLASH \u793a\u4f8b APP_STATUS_INDICATION_POWERON app_voice_report(APP_STATUS_INDICATION_POWERON, 0) --> \u200b app_voice_report_handler(APP_STATUS_INDICATION_POWERON, 0, true)--> \u200b media_PlayAudio_locally(id, device_id)[POWEROFF\u8c03\u7528] \u200b media_PlayAudio_standalone(AUD_ID_POWER_ON, 0) --> \u51fd\u6570\u539f\u578b\u53ca\u8bf4\u660e int app_voice_report(APP_STATUS_INDICATION_T status, uint8_t device_id) int app_voice_report_handler(APP_STATUS_INDICATION_T status, uint8_t device_id, uint8_t isMerging) void media_PlayAudio_locally(AUD_ID_ENUM id, uint8_t device_id) void media_PlayAudio(AUD_ID_ENUM id,uint8_t device_id) void media_PlayAudio_standalone(AUD_ID_ENUM id, uint8_t device_id) \u63d0\u793a\u97f3\u6587\u4ef6\u5b58\u50a8\u4f4d\u7f6e Flash \u6570\u636e\u533a\u57df\uff0c\u5728\u54ea\u91cc\uff1f\u5982\u4f55\u70e7\u5f55\uff1f\u5982\u4f55\u5212\u5206\uff1f\u4f18\u7f3a\u70b9\uff1f app audio \u51fd\u6570\u7684\u8c03\u7528\uff1aapp_init(void)--->app_audio_open(); app_audio_open \uff081\uff09\u521d\u59cb\u5316\u63d0\u793a\u97f3\u6a21\u5757\uff0c\u8c03\u7528app_prompt_list_init()\u5b8c\u6210\u4e86\u5185\u5b58\u7a7a\u95f4\u7533\u8bf7\uff0capp_prompt_list\u7533\u8bf7\uff0capp_prompt_handler_tid\u521b\u5efa\uff1b \uff082\uff09\u8bbe\u7f6eAPP_MODUAL_AUDIO\u6a21\u5757\u7684\u56de\u8c03app_audio_handle_process()\uff0c\u6839\u636e\u5f53\u524d\u8bbe\u7f6e\u7684APP_BT_SETTING_T\u5b8c\u6210\u97f3\u9891\u6d41\u7684\u5f00\u542fapp_bt_stream_open\u6216\u5173\u95edapp_bt_stream_close\u5904\u7406\uff0c\u5176\u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2aaudio\u961f\u5217\uff0c\u4f9d\u8d56\u4e8e\u5b8f\u5b9a\u4e49 AUDIO_QUEUE_SUPPORT \uff1b enum APP_MODUAL_ID_T { APP_MODUAL_KEY = 0, APP_MODUAL_AUDIO, APP_MODUAL_BATTERY, APP_MODUAL_BT, APP_MODUAL_FM, APP_MODUAL_SD, APP_MODUAL_LINEIN, APP_MODUAL_USBHOST, APP_MODUAL_USBDEVICE, APP_MODUAL_WATCHDOG, APP_MODUAL_AUDIO_MANAGE, APP_MODUAL_ANC, APP_MODUAL_VOICE_ASSIST, APP_MODUAL_SMART_MIC, #ifdef __PC_CMD_UART__ APP_MODUAL_CMD, #endif #ifdef TILE_DATAPATH APP_MODUAL_TILE, #endif APP_MODUAL_MIC, #ifdef VOICE_DETECTOR_EN APP_MODUAL_VOICE_DETECTOR, #endif #ifdef AUDIO_HEARING_COMPSATN APP_MODUAL_HEAR_COMP, #endif APP_MODUAL_OHTER, APP_MODUAL_NUM }; app_set_threadhandle(APP_MODUAL_AUDIO, app_audio_handle_process); enum APP_BT_SETTING_T { APP_BT_SETTING_OPEN = 0, APP_BT_SETTING_CLOSE, APP_BT_SETTING_SETUP, APP_BT_SETTING_RESTART, APP_BT_SETTING_CLOSEALL, APP_BT_SETTING_CLOSEMEDIA, APP_BT_SETTING_NUM, }; typedef struct { uint32_t message_id; uint32_t message_ptr; uint32_t message_Param0; uint32_t message_Param1; uint32_t message_Param2; } APP_MESSAGE_BODY; static int app_audio_handle_process(APP_MESSAGE_BODY *msg_body) \uff083\uff09bt\u6d41\u89e6\u53d1\u5668\u521d\u59cb\u5316app_bt_stream_init()\uff0c\u521b\u5efa\u5b9a\u65f6\u5668\uff0c\u5728\u97f3\u4e50\u6216\u7535\u8bdd\u6d41\u5f00\u542f\u65f6\u542f\u52a8\u5b9a\u65f6\u5668\u56de\u8c03app_bt_stream_trigger_timeout_cb()\u5411\u6a21\u5757APP_MODUAL_AUDIO\u53d1\u6d88\u606f\u8fdb\u5165\u56de\u8c03app_audio_handle_process\u5b8c\u6210\u76f8\u5e94\u64cd\u4f5c osTimerCreate(osTimer(APP_BT_STREAM_TRIGGER_TIMEOUT), osTimerOnce, NULL); app_audio_sendrequest_param(APP_BT_STREAM_A2DP_SBC, (uint8_t)APP_BT_SETTING_RESTART, 0, 0) app_audio_sendrequest(APP_BT_STREAM_HFP_PCM, (uint8_t)APP_BT_SETTING_RESTART, 0); App_bt_media_manager\u6a21\u5757 app_audio_manager_open \u51fd\u6570\u5185\u6d41\u7a0b\uff1a \uff081\uff09\u8bbe\u7f6eAPP_MODUAL_AUDIO_MANAGE\u6a21\u5757\u56de\u8c03app_audio_manager_handle_process()\uff0c\u6839\u636e\u5f53\u524dBT_MEDIA_MANAGER\u5b8c\u6210\u97f3\u4e50\u3001\u7535\u8bdd\u3001\u63d0\u793a\u97f3\u7684\u5f00\u542fbt_media_start\u6216\u5173\u95edbt_media_stop\u5904\u7406\u3002 enum APP_BT_MEDIA_MANAGER_ID_T { APP_BT_STREAM_MANAGER_START = 0, APP_BT_STREAM_MANAGER_STOP, APP_BT_STREAM_MANAGER_STOP_MEDIA, APP_BT_STREAM_MANAGER_UPDATE_MEDIA, APP_BT_STREAM_MANAGER_SWAP_SCO, APP_BT_STREAM_MANAGER_CTRL_VOLUME, APP_BT_STREAM_MANAGER_TUNE_SAMPLERATE_RATIO, APP_BT_STREAM_MANAGER_NUM, }; static int app_audio_manager_handle_process(APP_MESSAGE_BODY *msg_body) \uff082\uff09 \u901a\u8fc7\u8c03\u7528audio_prompt_init_handler()---> memset((uint8_t *)&audio_prompt_env, 0, sizeof(audio_prompt_env));\u5c06\u63d0\u793a\u97f3AUDIO_PROMPT_ENV_T\u521d\u59cb\u5316\u4e3a0\uff1b \uff083\uff09 APP_BT_SETTING_T\u7684\u4ea7\u751f\u8fc7\u7a0b\u5206\u97f3\u4e50\u3001\u7535\u8bdd\u3001\u63d0\u793a\u97f3\u4e09\u90e8\u5206\u4ecb\u7ecd audioflinger(\u97f3\u9891\u7ba1\u7406\u5668) \u4e3b\u8981\u529f\u80fd\uff1f \u7a0b\u5e8f\u6846\u67b6 \u68b3\u7406\u7b14\u8bb0\u8bb0\u5f55\uff1a af_open \u200b . \u521d\u59cb\u5316 af_stream_cfg_t\u7ed3\u6784\u4f53 . \u521b\u5efathread(af_thread),,\u5e76\u5229\u7528\u4fe1\u53f7\u91cf\u673a\u5236\u5b8c\u6210\u7ebf\u7a0b\u540c\u6b65\uff1b //pingpong machine enum AF_PP_T{ PP_PING = 0, PP_PANG = 1 }; enum AUD_STREAM_USE_DEVICE_T{ AUD_STREAM_USE_DEVICE_NULL = 0, AUD_STREAM_USE_EXT_CODEC, AUD_STREAM_USE_I2S0_MASTER, AUD_STREAM_USE_I2S0_SLAVE, AUD_STREAM_USE_I2S1_MASTER, AUD_STREAM_USE_I2S1_SLAVE, AUD_STREAM_USE_TDM0_MASTER, AUD_STREAM_USE_TDM0_SLAVE, AUD_STREAM_USE_TDM1_MASTER, AUD_STREAM_USE_TDM1_SLAVE, AUD_STREAM_USE_INT_CODEC, AUD_STREAM_USE_INT_CODEC2, AUD_STREAM_USE_INT_SPDIF, AUD_STREAM_USE_BT_PCM, AUD_STREAM_USE_DPD_RX, AUD_STREAM_USE_MC, }; struct af_stream_ctl_t{ enum AF_PP_T pp_index; //pingpong operate uint8_t pp_cnt; //use to count the lost signals uint8_t status; //status machine enum AUD_STREAM_USE_DEVICE_T use_device; uint32_t hdlr_intvl_ticks; uint32_t prev_hdlr_time; bool first_hdlr_proc; bool intvl_check_en; }; struct AF_STREAM_CONFIG_T { enum AUD_SAMPRATE_T sample_rate; // \u91c7\u6837\u7387 enum AUD_CHANNEL_MAP_T channel_map; // \u97f3\u9891\u901a\u9053map enum AUD_CHANNEL_NUM_T channel_num; // \u901a\u9053\u7f16\u53f7 enum AUD_BITS_T bits; // \u91c7\u6837\u5bbd\u5ea6(8\\12\\16\\20\\24\\32) enum AUD_STREAM_USE_DEVICE_T device; // \u97f3\u9891\u4f7f\u7528\u8bbe\u5907(i2S\\DMA\u7b49) enum AUD_IO_PATH_T io_path; // \u97f3\u9891\u8f93\u5165\u6765\u6e90\u53ca\u8f93\u51fa\u65b9\u5f0f(SPEAKER) enum AUD_DATA_ALIGN_T align; // \u6570\u636e\u5bf9\u9f50\u65b9\u5f0f enum AUD_FS_FIRST_EDGE_T fs_edge; // \u91c7\u6837\u65b9\u5f0f uint16_t fs_cycles; uint8_t slot_cycles; bool chan_sep_buf; bool sync_start; //should define type uint8_t vol; AF_STREAM_HANDLER_T handler; uint8_t *data_ptr; uint32_t data_size; }; struct af_stream_cfg_t { //used inside struct af_stream_ctl_t ctl; //dma buf parameters, RAM can be alloced in different way uint8_t *dma_buf_ptr; uint32_t dma_buf_size; //store stream cfg parameters struct AF_STREAM_CONFIG_T cfg; //dma cfg parameters #ifdef DYNAMIC_AUDIO_BUFFER_COUNT uint8_t dma_desc_cnt; #endif struct HAL_DMA_DESC_T dma_desc[MAX_AUDIO_BUFFER_COUNT]; struct HAL_DMA_CH_CFG_T dma_cfg; //callback function AF_STREAM_HANDLER_T handler; }; \u7ebf\u7a0b\u4e2d\u6839\u636e\u4e0d\u540c\u7684\u4fe1\u53f7\u91cf\uff0c\u8c03\u7528af_thread_stream_handler\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u6d41\u8fdb\u884c\u5904\u7406 static struct af_stream_cfg_t af_stream[AUD_STREAM_ID_NUM][AUD_STREAM_NUM]; AUD_STREAM_ID_NUM = 4 AUD_STREAM_NUM =2 [AUD_STREAM_ID_x(0,3)][AUD_STREAM_PLAYBACK=0] [AUD_STREAM_ID_x(0,3)][AUD_STREAM_CAPTURE=1] \u8fd9\u4e2a\u5177\u4f53\u600e\u4e48\u5bf9\u5e94\uff1f \u63d0\u793a\u97f3 app_voice_report \u51fd\u6570\u5185\u6d41\u7a0b\uff1a \uff081\uff09 app_voice_report(APP_STATUS_INDICATION_T status, uint8_t device_id)\u662f\u63d0\u793a\u97f3\u603b\u5165\u53e3\u51fd\u6570\uff0cAPP_STATUS_INDICATION_T \u679a\u4e3e\u7c7b\u578b\u53c2\u6570\u8868\u793a\u63d0\u793a\u97f3\u5e8f\u53f7\uff0c\u7528\u6765\u7d22\u5f15\u63d0\u793a\u97f3ID \uff0cdevice_id \u8868\u793a\u8bbe\u5907\u53f7\uff0c\u4e00\u822c\u662f0. typedef enum APP_STATUS_INDICATION_T { APP_STATUS_INDICATION_POWERON = 0, APP_STATUS_INDICATION_INITIAL, APP_STATUS_INDICATION_PAGESCAN, ... \uff082\uff09\u6839\u636e\u76f8\u5173\u5b8f\u5b9a\u4e49\u9009\u62e9\u4e0d\u540c\u7684\u63d0\u793a\u97f3\u64ad\u653e\u65b9\u5f0f void media_PlayAudio_locally(AUD_ID_ENUM id, uint8_t device_id)//\u4ec5\u672c\u5730\u64ad\u653e void media_PlayAudio_standalone_locally(AUD_ID_ENUM id, uint8_t device_id)//\u6253\u65ad\u64ad\u653e void media_PlayAudio(AUD_ID_ENUM id,uint8_t device_id)//\u6df7\u5408\u64ad\u653e \uff083\uff09 \u5982\u679c\u662f\u4ece\u8033\u53d1\u9001\u547d\u4ee4\u7ed9\u5bf9\u7aef\u4e3b\u8033\u64ad\u653eapp_tws_let_peer_device_play_audio_prompt()----->tws_ctrl_send_cmd()\uff0c\u5982\u679c\u662f\u4e3b\u8033\u53d1\u9001\u63d0\u793a\u97f3\u4efb\u52a1\u8bf7\u6c42app_prompt_push_request()---->app_prompt_list_append(app_prompt_list, &req);---->osSignalSet(app_prompt_handler_tid, PROMPT_HANDLER_SIGNAL_NEW_PROMPT_REQ); app_prompt_handler_thread \u51fd\u6570\u7684\u8c03\u7528\uff1aapp_prompt_list_init()--->app_prompt_handler_thread() \u51fd\u6570\u5185\u6d41\u7a0b\uff1a \uff081\uff09\u6536\u5230\u4fe1\u53f7PROMPT_HANDLER_SIGNAL_NEW_PROMPT_REQ\u540e,\u6839\u636e\u5f53\u524d\u662f\u5426\u6709\u6b63\u5728\u64ad\u653e\u7684\u63d0\u793a\u97f3\u4ee5\u53caapp_prompt_list\u662f\u5426\u4e3a\u7a7a\uff0c\u901a\u8fc7\u8c03\u7528app_prompt_refresh_list\u6765\u5b9e\u73b0\u76f8\u5173\u529f\u80fd\u3002 \uff082\uff09\u6536\u5230\u4fe1\u53f7PPROMPT_HANDLER_SIGNAL_CLEAR_REQ\u540e\uff0c\u5148\u6e05\u9664app_prompt_list\uff0c\u7136\u540e\u6df7\u5408\u6a21\u5f0f\u4e0b\u53d1\u9001PROMPT_HANDLER_SIGNAL_PLAYING_COMPLETED\u4fe1\u53f7\u505c\u6b62\u63d0\u793a\u97f3\uff0c\u6700\u540e\u901a\u8fc7app_audio_sendrequest(APP_PLAY_BACK_AUDIO, (uint8_t)APP_BT_SETTING_CLOSE, devId)---->app_audio_handle_process()\u5b8c\u6210\u63d0\u793a\u97f3\u6d41\u7684\u5173\u95ed\u3002 \uff083\uff09\u6536\u5230\u4fe1\u53f7PROMPT_HANDLER_SIGNAL_PLAYING_COMPLETED\uff0c\u5148\u6807\u8bc6\u5f53\u524d\u6ca1\u6709\u6b63\u5728\u64ad\u653e\u7684\u63d0\u793a\u97f3\uff0c\u7136\u540e\u505c\u6b62\u63d0\u793a\u97f3\u4fdd\u62a4\u5b9a\u65f6\u5668app_prompt_protector_timer\uff0c\u6700\u540e\uff0c\u8c03\u7528app_prompt_refresh_list\u6765\u5b9e\u73b0\u76f8\u5173\u529f\u80fd\u3002","title":"\u7a0b\u5e8f\u8c03\u7528\u6d41\u7a0b"},{"location":"BES/learn_mark.html#_1","text":"AUDIO_PROMPT_USE_DAC2_ENABLED = 1 IBRT = 1 \u5b9a\u4e49 \u4e86 AUDIO_QUEUE_SUPPORT MEDIA_PLAYER_SUPPORT \u672a\u5b9a\u4e49 PROMPT_IN_FLASH","title":"\u7a0b\u5e8f\u8c03\u7528\u6d41\u7a0b"},{"location":"BES/learn_mark.html#app_status_indication_poweron","text":"app_voice_report(APP_STATUS_INDICATION_POWERON, 0) --> \u200b app_voice_report_handler(APP_STATUS_INDICATION_POWERON, 0, true)--> \u200b media_PlayAudio_locally(id, device_id)[POWEROFF\u8c03\u7528] \u200b media_PlayAudio_standalone(AUD_ID_POWER_ON, 0) -->","title":"\u793a\u4f8b APP_STATUS_INDICATION_POWERON"},{"location":"BES/learn_mark.html#_2","text":"int app_voice_report(APP_STATUS_INDICATION_T status, uint8_t device_id) int app_voice_report_handler(APP_STATUS_INDICATION_T status, uint8_t device_id, uint8_t isMerging) void media_PlayAudio_locally(AUD_ID_ENUM id, uint8_t device_id) void media_PlayAudio(AUD_ID_ENUM id,uint8_t device_id) void media_PlayAudio_standalone(AUD_ID_ENUM id, uint8_t device_id)","title":"\u51fd\u6570\u539f\u578b\u53ca\u8bf4\u660e"},{"location":"BES/learn_mark.html#_3","text":"Flash \u6570\u636e\u533a\u57df\uff0c\u5728\u54ea\u91cc\uff1f\u5982\u4f55\u70e7\u5f55\uff1f\u5982\u4f55\u5212\u5206\uff1f\u4f18\u7f3a\u70b9\uff1f","title":"\u63d0\u793a\u97f3\u6587\u4ef6\u5b58\u50a8\u4f4d\u7f6e"},{"location":"BES/learn_mark.html#app-audio","text":"\u51fd\u6570\u7684\u8c03\u7528\uff1aapp_init(void)--->app_audio_open(); app_audio_open \uff081\uff09\u521d\u59cb\u5316\u63d0\u793a\u97f3\u6a21\u5757\uff0c\u8c03\u7528app_prompt_list_init()\u5b8c\u6210\u4e86\u5185\u5b58\u7a7a\u95f4\u7533\u8bf7\uff0capp_prompt_list\u7533\u8bf7\uff0capp_prompt_handler_tid\u521b\u5efa\uff1b \uff082\uff09\u8bbe\u7f6eAPP_MODUAL_AUDIO\u6a21\u5757\u7684\u56de\u8c03app_audio_handle_process()\uff0c\u6839\u636e\u5f53\u524d\u8bbe\u7f6e\u7684APP_BT_SETTING_T\u5b8c\u6210\u97f3\u9891\u6d41\u7684\u5f00\u542fapp_bt_stream_open\u6216\u5173\u95edapp_bt_stream_close\u5904\u7406\uff0c\u5176\u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2aaudio\u961f\u5217\uff0c\u4f9d\u8d56\u4e8e\u5b8f\u5b9a\u4e49 AUDIO_QUEUE_SUPPORT \uff1b enum APP_MODUAL_ID_T { APP_MODUAL_KEY = 0, APP_MODUAL_AUDIO, APP_MODUAL_BATTERY, APP_MODUAL_BT, APP_MODUAL_FM, APP_MODUAL_SD, APP_MODUAL_LINEIN, APP_MODUAL_USBHOST, APP_MODUAL_USBDEVICE, APP_MODUAL_WATCHDOG, APP_MODUAL_AUDIO_MANAGE, APP_MODUAL_ANC, APP_MODUAL_VOICE_ASSIST, APP_MODUAL_SMART_MIC, #ifdef __PC_CMD_UART__ APP_MODUAL_CMD, #endif #ifdef TILE_DATAPATH APP_MODUAL_TILE, #endif APP_MODUAL_MIC, #ifdef VOICE_DETECTOR_EN APP_MODUAL_VOICE_DETECTOR, #endif #ifdef AUDIO_HEARING_COMPSATN APP_MODUAL_HEAR_COMP, #endif APP_MODUAL_OHTER, APP_MODUAL_NUM }; app_set_threadhandle(APP_MODUAL_AUDIO, app_audio_handle_process); enum APP_BT_SETTING_T { APP_BT_SETTING_OPEN = 0, APP_BT_SETTING_CLOSE, APP_BT_SETTING_SETUP, APP_BT_SETTING_RESTART, APP_BT_SETTING_CLOSEALL, APP_BT_SETTING_CLOSEMEDIA, APP_BT_SETTING_NUM, }; typedef struct { uint32_t message_id; uint32_t message_ptr; uint32_t message_Param0; uint32_t message_Param1; uint32_t message_Param2; } APP_MESSAGE_BODY; static int app_audio_handle_process(APP_MESSAGE_BODY *msg_body) \uff083\uff09bt\u6d41\u89e6\u53d1\u5668\u521d\u59cb\u5316app_bt_stream_init()\uff0c\u521b\u5efa\u5b9a\u65f6\u5668\uff0c\u5728\u97f3\u4e50\u6216\u7535\u8bdd\u6d41\u5f00\u542f\u65f6\u542f\u52a8\u5b9a\u65f6\u5668\u56de\u8c03app_bt_stream_trigger_timeout_cb()\u5411\u6a21\u5757APP_MODUAL_AUDIO\u53d1\u6d88\u606f\u8fdb\u5165\u56de\u8c03app_audio_handle_process\u5b8c\u6210\u76f8\u5e94\u64cd\u4f5c osTimerCreate(osTimer(APP_BT_STREAM_TRIGGER_TIMEOUT), osTimerOnce, NULL); app_audio_sendrequest_param(APP_BT_STREAM_A2DP_SBC, (uint8_t)APP_BT_SETTING_RESTART, 0, 0) app_audio_sendrequest(APP_BT_STREAM_HFP_PCM, (uint8_t)APP_BT_SETTING_RESTART, 0);","title":"app audio"},{"location":"BES/learn_mark.html#app_bt_media_manager","text":"app_audio_manager_open \u51fd\u6570\u5185\u6d41\u7a0b\uff1a \uff081\uff09\u8bbe\u7f6eAPP_MODUAL_AUDIO_MANAGE\u6a21\u5757\u56de\u8c03app_audio_manager_handle_process()\uff0c\u6839\u636e\u5f53\u524dBT_MEDIA_MANAGER\u5b8c\u6210\u97f3\u4e50\u3001\u7535\u8bdd\u3001\u63d0\u793a\u97f3\u7684\u5f00\u542fbt_media_start\u6216\u5173\u95edbt_media_stop\u5904\u7406\u3002 enum APP_BT_MEDIA_MANAGER_ID_T { APP_BT_STREAM_MANAGER_START = 0, APP_BT_STREAM_MANAGER_STOP, APP_BT_STREAM_MANAGER_STOP_MEDIA, APP_BT_STREAM_MANAGER_UPDATE_MEDIA, APP_BT_STREAM_MANAGER_SWAP_SCO, APP_BT_STREAM_MANAGER_CTRL_VOLUME, APP_BT_STREAM_MANAGER_TUNE_SAMPLERATE_RATIO, APP_BT_STREAM_MANAGER_NUM, }; static int app_audio_manager_handle_process(APP_MESSAGE_BODY *msg_body) \uff082\uff09 \u901a\u8fc7\u8c03\u7528audio_prompt_init_handler()---> memset((uint8_t *)&audio_prompt_env, 0, sizeof(audio_prompt_env));\u5c06\u63d0\u793a\u97f3AUDIO_PROMPT_ENV_T\u521d\u59cb\u5316\u4e3a0\uff1b \uff083\uff09 APP_BT_SETTING_T\u7684\u4ea7\u751f\u8fc7\u7a0b\u5206\u97f3\u4e50\u3001\u7535\u8bdd\u3001\u63d0\u793a\u97f3\u4e09\u90e8\u5206\u4ecb\u7ecd","title":"App_bt_media_manager\u6a21\u5757"},{"location":"BES/learn_mark.html#audioflinger","text":"\u4e3b\u8981\u529f\u80fd\uff1f \u7a0b\u5e8f\u6846\u67b6 \u68b3\u7406\u7b14\u8bb0\u8bb0\u5f55\uff1a af_open \u200b . \u521d\u59cb\u5316 af_stream_cfg_t\u7ed3\u6784\u4f53 . \u521b\u5efathread(af_thread),,\u5e76\u5229\u7528\u4fe1\u53f7\u91cf\u673a\u5236\u5b8c\u6210\u7ebf\u7a0b\u540c\u6b65\uff1b //pingpong machine enum AF_PP_T{ PP_PING = 0, PP_PANG = 1 }; enum AUD_STREAM_USE_DEVICE_T{ AUD_STREAM_USE_DEVICE_NULL = 0, AUD_STREAM_USE_EXT_CODEC, AUD_STREAM_USE_I2S0_MASTER, AUD_STREAM_USE_I2S0_SLAVE, AUD_STREAM_USE_I2S1_MASTER, AUD_STREAM_USE_I2S1_SLAVE, AUD_STREAM_USE_TDM0_MASTER, AUD_STREAM_USE_TDM0_SLAVE, AUD_STREAM_USE_TDM1_MASTER, AUD_STREAM_USE_TDM1_SLAVE, AUD_STREAM_USE_INT_CODEC, AUD_STREAM_USE_INT_CODEC2, AUD_STREAM_USE_INT_SPDIF, AUD_STREAM_USE_BT_PCM, AUD_STREAM_USE_DPD_RX, AUD_STREAM_USE_MC, }; struct af_stream_ctl_t{ enum AF_PP_T pp_index; //pingpong operate uint8_t pp_cnt; //use to count the lost signals uint8_t status; //status machine enum AUD_STREAM_USE_DEVICE_T use_device; uint32_t hdlr_intvl_ticks; uint32_t prev_hdlr_time; bool first_hdlr_proc; bool intvl_check_en; }; struct AF_STREAM_CONFIG_T { enum AUD_SAMPRATE_T sample_rate; // \u91c7\u6837\u7387 enum AUD_CHANNEL_MAP_T channel_map; // \u97f3\u9891\u901a\u9053map enum AUD_CHANNEL_NUM_T channel_num; // \u901a\u9053\u7f16\u53f7 enum AUD_BITS_T bits; // \u91c7\u6837\u5bbd\u5ea6(8\\12\\16\\20\\24\\32) enum AUD_STREAM_USE_DEVICE_T device; // \u97f3\u9891\u4f7f\u7528\u8bbe\u5907(i2S\\DMA\u7b49) enum AUD_IO_PATH_T io_path; // \u97f3\u9891\u8f93\u5165\u6765\u6e90\u53ca\u8f93\u51fa\u65b9\u5f0f(SPEAKER) enum AUD_DATA_ALIGN_T align; // \u6570\u636e\u5bf9\u9f50\u65b9\u5f0f enum AUD_FS_FIRST_EDGE_T fs_edge; // \u91c7\u6837\u65b9\u5f0f uint16_t fs_cycles; uint8_t slot_cycles; bool chan_sep_buf; bool sync_start; //should define type uint8_t vol; AF_STREAM_HANDLER_T handler; uint8_t *data_ptr; uint32_t data_size; }; struct af_stream_cfg_t { //used inside struct af_stream_ctl_t ctl; //dma buf parameters, RAM can be alloced in different way uint8_t *dma_buf_ptr; uint32_t dma_buf_size; //store stream cfg parameters struct AF_STREAM_CONFIG_T cfg; //dma cfg parameters #ifdef DYNAMIC_AUDIO_BUFFER_COUNT uint8_t dma_desc_cnt; #endif struct HAL_DMA_DESC_T dma_desc[MAX_AUDIO_BUFFER_COUNT]; struct HAL_DMA_CH_CFG_T dma_cfg; //callback function AF_STREAM_HANDLER_T handler; }; \u7ebf\u7a0b\u4e2d\u6839\u636e\u4e0d\u540c\u7684\u4fe1\u53f7\u91cf\uff0c\u8c03\u7528af_thread_stream_handler\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u6d41\u8fdb\u884c\u5904\u7406 static struct af_stream_cfg_t af_stream[AUD_STREAM_ID_NUM][AUD_STREAM_NUM]; AUD_STREAM_ID_NUM = 4 AUD_STREAM_NUM =2 [AUD_STREAM_ID_x(0,3)][AUD_STREAM_PLAYBACK=0] [AUD_STREAM_ID_x(0,3)][AUD_STREAM_CAPTURE=1] \u8fd9\u4e2a\u5177\u4f53\u600e\u4e48\u5bf9\u5e94\uff1f","title":"audioflinger(\u97f3\u9891\u7ba1\u7406\u5668)"},{"location":"BES/learn_mark.html#_4","text":"app_voice_report \u51fd\u6570\u5185\u6d41\u7a0b\uff1a \uff081\uff09 app_voice_report(APP_STATUS_INDICATION_T status, uint8_t device_id)\u662f\u63d0\u793a\u97f3\u603b\u5165\u53e3\u51fd\u6570\uff0cAPP_STATUS_INDICATION_T \u679a\u4e3e\u7c7b\u578b\u53c2\u6570\u8868\u793a\u63d0\u793a\u97f3\u5e8f\u53f7\uff0c\u7528\u6765\u7d22\u5f15\u63d0\u793a\u97f3ID \uff0cdevice_id \u8868\u793a\u8bbe\u5907\u53f7\uff0c\u4e00\u822c\u662f0. typedef enum APP_STATUS_INDICATION_T { APP_STATUS_INDICATION_POWERON = 0, APP_STATUS_INDICATION_INITIAL, APP_STATUS_INDICATION_PAGESCAN, ... \uff082\uff09\u6839\u636e\u76f8\u5173\u5b8f\u5b9a\u4e49\u9009\u62e9\u4e0d\u540c\u7684\u63d0\u793a\u97f3\u64ad\u653e\u65b9\u5f0f void media_PlayAudio_locally(AUD_ID_ENUM id, uint8_t device_id)//\u4ec5\u672c\u5730\u64ad\u653e void media_PlayAudio_standalone_locally(AUD_ID_ENUM id, uint8_t device_id)//\u6253\u65ad\u64ad\u653e void media_PlayAudio(AUD_ID_ENUM id,uint8_t device_id)//\u6df7\u5408\u64ad\u653e \uff083\uff09 \u5982\u679c\u662f\u4ece\u8033\u53d1\u9001\u547d\u4ee4\u7ed9\u5bf9\u7aef\u4e3b\u8033\u64ad\u653eapp_tws_let_peer_device_play_audio_prompt()----->tws_ctrl_send_cmd()\uff0c\u5982\u679c\u662f\u4e3b\u8033\u53d1\u9001\u63d0\u793a\u97f3\u4efb\u52a1\u8bf7\u6c42app_prompt_push_request()---->app_prompt_list_append(app_prompt_list, &req);---->osSignalSet(app_prompt_handler_tid, PROMPT_HANDLER_SIGNAL_NEW_PROMPT_REQ); app_prompt_handler_thread \u51fd\u6570\u7684\u8c03\u7528\uff1aapp_prompt_list_init()--->app_prompt_handler_thread() \u51fd\u6570\u5185\u6d41\u7a0b\uff1a \uff081\uff09\u6536\u5230\u4fe1\u53f7PROMPT_HANDLER_SIGNAL_NEW_PROMPT_REQ\u540e,\u6839\u636e\u5f53\u524d\u662f\u5426\u6709\u6b63\u5728\u64ad\u653e\u7684\u63d0\u793a\u97f3\u4ee5\u53caapp_prompt_list\u662f\u5426\u4e3a\u7a7a\uff0c\u901a\u8fc7\u8c03\u7528app_prompt_refresh_list\u6765\u5b9e\u73b0\u76f8\u5173\u529f\u80fd\u3002 \uff082\uff09\u6536\u5230\u4fe1\u53f7PPROMPT_HANDLER_SIGNAL_CLEAR_REQ\u540e\uff0c\u5148\u6e05\u9664app_prompt_list\uff0c\u7136\u540e\u6df7\u5408\u6a21\u5f0f\u4e0b\u53d1\u9001PROMPT_HANDLER_SIGNAL_PLAYING_COMPLETED\u4fe1\u53f7\u505c\u6b62\u63d0\u793a\u97f3\uff0c\u6700\u540e\u901a\u8fc7app_audio_sendrequest(APP_PLAY_BACK_AUDIO, (uint8_t)APP_BT_SETTING_CLOSE, devId)---->app_audio_handle_process()\u5b8c\u6210\u63d0\u793a\u97f3\u6d41\u7684\u5173\u95ed\u3002 \uff083\uff09\u6536\u5230\u4fe1\u53f7PROMPT_HANDLER_SIGNAL_PLAYING_COMPLETED\uff0c\u5148\u6807\u8bc6\u5f53\u524d\u6ca1\u6709\u6b63\u5728\u64ad\u653e\u7684\u63d0\u793a\u97f3\uff0c\u7136\u540e\u505c\u6b62\u63d0\u793a\u97f3\u4fdd\u62a4\u5b9a\u65f6\u5668app_prompt_protector_timer\uff0c\u6700\u540e\uff0c\u8c03\u7528app_prompt_refresh_list\u6765\u5b9e\u73b0\u76f8\u5173\u529f\u80fd\u3002","title":"\u63d0\u793a\u97f3"}]}